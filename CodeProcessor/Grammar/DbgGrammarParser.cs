//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     ANTLR Version: 4.11.1
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

// Generated from c:\Users\Benedek\Desktop\Dipterv_src\DbgDsl\CodeProcessor\Grammar\DbgGrammar.g4 by ANTLR 4.11.1

// Unreachable code detected
#pragma warning disable 0162
// The variable '...' is assigned but its value is never used
#pragma warning disable 0219
// Missing XML comment for publicly visible type or member '...'
#pragma warning disable 1591
// Ambiguous reference in cref attribute
#pragma warning disable 419

namespace CodeProcessor.Grammar {
#pragma warning disable 3021
using System;
using System.IO;
using System.Text;
using System.Diagnostics;
using System.Collections.Generic;
using Antlr4.Runtime;
using Antlr4.Runtime.Atn;
using Antlr4.Runtime.Misc;
using Antlr4.Runtime.Tree;
using DFA = Antlr4.Runtime.Dfa.DFA;

[System.CodeDom.Compiler.GeneratedCode("ANTLR", "4.11.1")]
[System.CLSCompliant(false)]
public partial class DbgGrammarParser : Parser {
	protected static DFA[] decisionToDFA;
	protected static PredictionContextCache sharedContextCache = new PredictionContextCache();
	public const int
		PLUS=1, MINUS=2, MULT=3, DIV=4, MOD=5, LT=6, GT=7, LTE=8, GTE=9, EQ=10, 
		NEQ=11, AND=12, OR=13, IS=14, NOT=15, HAS=16, NO=17, COLONEQ=18, COLON=19, 
		SSUFFIX=20, LCURLY=21, RCURLY=22, LPAREN=23, RPAREN=24, LBRACKET=25, RBRACKET=26, 
		NUM=27, CW=28, ID=29, X=30, NL=31, WS=32;
	public const int
		RULE_program = 0, RULE_statementList = 1, RULE_definitionStatementList = 2, 
		RULE_statement = 3, RULE_commandDefinition = 4, RULE_varDefinition = 5, 
		RULE_assignment = 6, RULE_command = 7, RULE_commandDeclaration = 8, RULE_argumentDeclaration = 9, 
		RULE_typeDefinition = 10, RULE_expression = 11, RULE_block = 12, RULE_varRef = 13, 
		RULE_numericExpression = 14, RULE_booleanExpression = 15, RULE_relationExpression = 16, 
		RULE_enumIsExpression = 17, RULE_listHasExpression = 18, RULE_numberPredicate = 19, 
		RULE_cardPredicate = 20, RULE_enumLiteral = 21;
	public static readonly string[] ruleNames = {
		"program", "statementList", "definitionStatementList", "statement", "commandDefinition", 
		"varDefinition", "assignment", "command", "commandDeclaration", "argumentDeclaration", 
		"typeDefinition", "expression", "block", "varRef", "numericExpression", 
		"booleanExpression", "relationExpression", "enumIsExpression", "listHasExpression", 
		"numberPredicate", "cardPredicate", "enumLiteral"
	};

	private static readonly string[] _LiteralNames = {
		null, "'+'", "'-'", "'*'", "'/'", "'%'", "'<'", "'>'", "'<='", "'>='", 
		"'='", "'!='", "'&'", "'|'", "'IS'", "'NOT'", "'HAS'", "'NO'", "':='", 
		"':'", "''s'", "'{'", "'}'", "'('", "')'", "'['", "']'", null, null, null, 
		"'X'"
	};
	private static readonly string[] _SymbolicNames = {
		null, "PLUS", "MINUS", "MULT", "DIV", "MOD", "LT", "GT", "LTE", "GTE", 
		"EQ", "NEQ", "AND", "OR", "IS", "NOT", "HAS", "NO", "COLONEQ", "COLON", 
		"SSUFFIX", "LCURLY", "RCURLY", "LPAREN", "RPAREN", "LBRACKET", "RBRACKET", 
		"NUM", "CW", "ID", "X", "NL", "WS"
	};
	public static readonly IVocabulary DefaultVocabulary = new Vocabulary(_LiteralNames, _SymbolicNames);

	[NotNull]
	public override IVocabulary Vocabulary
	{
		get
		{
			return DefaultVocabulary;
		}
	}

	public override string GrammarFileName { get { return "DbgGrammar.g4"; } }

	public override string[] RuleNames { get { return ruleNames; } }

	public override int[] SerializedAtn { get { return _serializedATN; } }

	static DbgGrammarParser() {
		decisionToDFA = new DFA[_ATN.NumberOfDecisions];
		for (int i = 0; i < _ATN.NumberOfDecisions; i++) {
			decisionToDFA[i] = new DFA(_ATN.GetDecisionState(i), i);
		}
	}

		public DbgGrammarParser(ITokenStream input) : this(input, Console.Out, Console.Error) { }

		public DbgGrammarParser(ITokenStream input, TextWriter output, TextWriter errorOutput)
		: base(input, output, errorOutput)
	{
		Interpreter = new ParserATNSimulator(this, _ATN, decisionToDFA, sharedContextCache);
	}

	public partial class ProgramContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public DefinitionStatementListContext definitionStatementList() {
			return GetRuleContext<DefinitionStatementListContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Eof() { return GetToken(DbgGrammarParser.Eof, 0); }
		public ProgramContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_program; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IDbgGrammarVisitor<TResult> typedVisitor = visitor as IDbgGrammarVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitProgram(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ProgramContext program() {
		ProgramContext _localctx = new ProgramContext(Context, State);
		EnterRule(_localctx, 0, RULE_program);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 44;
			definitionStatementList();
			State = 45;
			Match(Eof);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class StatementListContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] NL() { return GetTokens(DbgGrammarParser.NL); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NL(int i) {
			return GetToken(DbgGrammarParser.NL, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public StatementContext[] statement() {
			return GetRuleContexts<StatementContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public StatementContext statement(int i) {
			return GetRuleContext<StatementContext>(i);
		}
		public StatementListContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_statementList; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IDbgGrammarVisitor<TResult> typedVisitor = visitor as IDbgGrammarVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitStatementList(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public StatementListContext statementList() {
		StatementListContext _localctx = new StatementListContext(Context, State);
		EnterRule(_localctx, 2, RULE_statementList);
		int _la;
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 48;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,0,Context) ) {
			case 1:
				{
				State = 47;
				Match(NL);
				}
				break;
			}
			State = 58;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (((_la) & ~0x3f) == 0 && ((1L << _la) & 2057306176L) != 0) {
				{
				State = 50;
				statement();
				State = 55;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,1,Context);
				while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
					if ( _alt==1 ) {
						{
						{
						State = 51;
						Match(NL);
						State = 52;
						statement();
						}
						} 
					}
					State = 57;
					ErrorHandler.Sync(this);
					_alt = Interpreter.AdaptivePredict(TokenStream,1,Context);
				}
				}
			}

			State = 61;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==NL) {
				{
				State = 60;
				Match(NL);
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class DefinitionStatementListContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] NL() { return GetTokens(DbgGrammarParser.NL); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NL(int i) {
			return GetToken(DbgGrammarParser.NL, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public CommandDefinitionContext[] commandDefinition() {
			return GetRuleContexts<CommandDefinitionContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public CommandDefinitionContext commandDefinition(int i) {
			return GetRuleContext<CommandDefinitionContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public StatementContext[] statement() {
			return GetRuleContexts<StatementContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public StatementContext statement(int i) {
			return GetRuleContext<StatementContext>(i);
		}
		public DefinitionStatementListContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_definitionStatementList; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IDbgGrammarVisitor<TResult> typedVisitor = visitor as IDbgGrammarVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitDefinitionStatementList(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public DefinitionStatementListContext definitionStatementList() {
		DefinitionStatementListContext _localctx = new DefinitionStatementListContext(Context, State);
		EnterRule(_localctx, 4, RULE_definitionStatementList);
		int _la;
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 64;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,4,Context) ) {
			case 1:
				{
				State = 63;
				Match(NL);
				}
				break;
			}
			State = 80;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (((_la) & ~0x3f) == 0 && ((1L << _la) & 2057306176L) != 0) {
				{
				State = 68;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,5,Context) ) {
				case 1:
					{
					State = 66;
					commandDefinition();
					}
					break;
				case 2:
					{
					State = 67;
					statement();
					}
					break;
				}
				State = 77;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,7,Context);
				while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
					if ( _alt==1 ) {
						{
						{
						State = 70;
						Match(NL);
						State = 73;
						ErrorHandler.Sync(this);
						switch ( Interpreter.AdaptivePredict(TokenStream,6,Context) ) {
						case 1:
							{
							State = 71;
							commandDefinition();
							}
							break;
						case 2:
							{
							State = 72;
							statement();
							}
							break;
						}
						}
						} 
					}
					State = 79;
					ErrorHandler.Sync(this);
					_alt = Interpreter.AdaptivePredict(TokenStream,7,Context);
				}
				}
			}

			State = 83;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==NL) {
				{
				State = 82;
				Match(NL);
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class StatementContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public CommandContext command() {
			return GetRuleContext<CommandContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public VarDefinitionContext varDefinition() {
			return GetRuleContext<VarDefinitionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public AssignmentContext assignment() {
			return GetRuleContext<AssignmentContext>(0);
		}
		public StatementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_statement; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IDbgGrammarVisitor<TResult> typedVisitor = visitor as IDbgGrammarVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitStatement(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public StatementContext statement() {
		StatementContext _localctx = new StatementContext(Context, State);
		EnterRule(_localctx, 6, RULE_statement);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 87;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,10,Context) ) {
			case 1:
				{
				State = 85;
				varDefinition();
				}
				break;
			case 2:
				{
				State = 86;
				assignment();
				}
				break;
			}
			State = 91;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,11,Context) ) {
			case 1:
				{
				State = 89;
				command();
				}
				break;
			case 2:
				{
				State = 90;
				expression();
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class CommandDefinitionContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LPAREN() { return GetToken(DbgGrammarParser.LPAREN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public CommandDeclarationContext commandDeclaration() {
			return GetRuleContext<CommandDeclarationContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RPAREN() { return GetToken(DbgGrammarParser.RPAREN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COLON() { return GetToken(DbgGrammarParser.COLON, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public BlockContext block() {
			return GetRuleContext<BlockContext>(0);
		}
		public CommandDefinitionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_commandDefinition; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IDbgGrammarVisitor<TResult> typedVisitor = visitor as IDbgGrammarVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitCommandDefinition(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public CommandDefinitionContext commandDefinition() {
		CommandDefinitionContext _localctx = new CommandDefinitionContext(Context, State);
		EnterRule(_localctx, 8, RULE_commandDefinition);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 93;
			Match(LPAREN);
			State = 94;
			commandDeclaration();
			State = 95;
			Match(RPAREN);
			State = 96;
			Match(COLON);
			State = 97;
			block();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class VarDefinitionContext : ParserRuleContext {
		public IToken varName;
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COLON() { return GetToken(DbgGrammarParser.COLON, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ID() { return GetToken(DbgGrammarParser.ID, 0); }
		public VarDefinitionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_varDefinition; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IDbgGrammarVisitor<TResult> typedVisitor = visitor as IDbgGrammarVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitVarDefinition(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public VarDefinitionContext varDefinition() {
		VarDefinitionContext _localctx = new VarDefinitionContext(Context, State);
		EnterRule(_localctx, 10, RULE_varDefinition);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			{
			State = 99;
			_localctx.varName = Match(ID);
			}
			State = 100;
			Match(COLON);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class AssignmentContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public VarRefContext varRef() {
			return GetRuleContext<VarRefContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COLONEQ() { return GetToken(DbgGrammarParser.COLONEQ, 0); }
		public AssignmentContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_assignment; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IDbgGrammarVisitor<TResult> typedVisitor = visitor as IDbgGrammarVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitAssignment(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public AssignmentContext assignment() {
		AssignmentContext _localctx = new AssignmentContext(Context, State);
		EnterRule(_localctx, 12, RULE_assignment);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 102;
			varRef();
			State = 103;
			Match(COLONEQ);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class CommandContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] CW() { return GetTokens(DbgGrammarParser.CW); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CW(int i) {
			return GetToken(DbgGrammarParser.CW, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext[] expression() {
			return GetRuleContexts<ExpressionContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression(int i) {
			return GetRuleContext<ExpressionContext>(i);
		}
		public CommandContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_command; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IDbgGrammarVisitor<TResult> typedVisitor = visitor as IDbgGrammarVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitCommand(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public CommandContext command() {
		CommandContext _localctx = new CommandContext(Context, State);
		EnterRule(_localctx, 14, RULE_command);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 105;
			Match(CW);
			State = 110;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (((_la) & ~0x3f) == 0 && ((1L << _la) & 2057306176L) != 0) {
				{
				State = 108;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,12,Context) ) {
				case 1:
					{
					State = 106;
					Match(CW);
					}
					break;
				case 2:
					{
					State = 107;
					expression();
					}
					break;
				}
				}
				State = 112;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class CommandDeclarationContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] CW() { return GetTokens(DbgGrammarParser.CW); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CW(int i) {
			return GetToken(DbgGrammarParser.CW, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ArgumentDeclarationContext[] argumentDeclaration() {
			return GetRuleContexts<ArgumentDeclarationContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ArgumentDeclarationContext argumentDeclaration(int i) {
			return GetRuleContext<ArgumentDeclarationContext>(i);
		}
		public CommandDeclarationContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_commandDeclaration; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IDbgGrammarVisitor<TResult> typedVisitor = visitor as IDbgGrammarVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitCommandDeclaration(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public CommandDeclarationContext commandDeclaration() {
		CommandDeclarationContext _localctx = new CommandDeclarationContext(Context, State);
		EnterRule(_localctx, 16, RULE_commandDeclaration);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 113;
			Match(CW);
			State = 118;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==LPAREN || _la==CW) {
				{
				State = 116;
				ErrorHandler.Sync(this);
				switch (TokenStream.LA(1)) {
				case CW:
					{
					State = 114;
					Match(CW);
					}
					break;
				case LPAREN:
					{
					State = 115;
					argumentDeclaration();
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				}
				State = 120;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ArgumentDeclarationContext : ParserRuleContext {
		public IToken name;
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LPAREN() { return GetToken(DbgGrammarParser.LPAREN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COLON() { return GetToken(DbgGrammarParser.COLON, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public TypeDefinitionContext typeDefinition() {
			return GetRuleContext<TypeDefinitionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RPAREN() { return GetToken(DbgGrammarParser.RPAREN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ID() { return GetToken(DbgGrammarParser.ID, 0); }
		public ArgumentDeclarationContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_argumentDeclaration; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IDbgGrammarVisitor<TResult> typedVisitor = visitor as IDbgGrammarVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitArgumentDeclaration(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ArgumentDeclarationContext argumentDeclaration() {
		ArgumentDeclarationContext _localctx = new ArgumentDeclarationContext(Context, State);
		EnterRule(_localctx, 18, RULE_argumentDeclaration);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 121;
			Match(LPAREN);
			State = 122;
			_localctx.name = Match(ID);
			State = 123;
			Match(COLON);
			State = 124;
			typeDefinition();
			State = 125;
			Match(RPAREN);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class TypeDefinitionContext : ParserRuleContext {
		public IToken mainType;
		public TypeDefinitionContext subType;
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CW() { return GetToken(DbgGrammarParser.CW, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LT() { return GetToken(DbgGrammarParser.LT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode GT() { return GetToken(DbgGrammarParser.GT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public TypeDefinitionContext typeDefinition() {
			return GetRuleContext<TypeDefinitionContext>(0);
		}
		public TypeDefinitionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_typeDefinition; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IDbgGrammarVisitor<TResult> typedVisitor = visitor as IDbgGrammarVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitTypeDefinition(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public TypeDefinitionContext typeDefinition() {
		TypeDefinitionContext _localctx = new TypeDefinitionContext(Context, State);
		EnterRule(_localctx, 20, RULE_typeDefinition);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 127;
			_localctx.mainType = Match(CW);
			State = 132;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==LT) {
				{
				State = 128;
				Match(LT);
				State = 129;
				_localctx.subType = typeDefinition();
				State = 130;
				Match(GT);
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ExpressionContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public VarRefContext varRef() {
			return GetRuleContext<VarRefContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public BlockContext block() {
			return GetRuleContext<BlockContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public NumericExpressionContext numericExpression() {
			return GetRuleContext<NumericExpressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public BooleanExpressionContext booleanExpression() {
			return GetRuleContext<BooleanExpressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public NumberPredicateContext numberPredicate() {
			return GetRuleContext<NumberPredicateContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public CardPredicateContext cardPredicate() {
			return GetRuleContext<CardPredicateContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public EnumLiteralContext enumLiteral() {
			return GetRuleContext<EnumLiteralContext>(0);
		}
		public ExpressionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_expression; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IDbgGrammarVisitor<TResult> typedVisitor = visitor as IDbgGrammarVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitExpression(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ExpressionContext expression() {
		ExpressionContext _localctx = new ExpressionContext(Context, State);
		EnterRule(_localctx, 22, RULE_expression);
		try {
			State = 141;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,17,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 134;
				varRef();
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 135;
				block();
				}
				break;
			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 136;
				numericExpression(0);
				}
				break;
			case 4:
				EnterOuterAlt(_localctx, 4);
				{
				State = 137;
				booleanExpression(0);
				}
				break;
			case 5:
				EnterOuterAlt(_localctx, 5);
				{
				State = 138;
				numberPredicate();
				}
				break;
			case 6:
				EnterOuterAlt(_localctx, 6);
				{
				State = 139;
				cardPredicate();
				}
				break;
			case 7:
				EnterOuterAlt(_localctx, 7);
				{
				State = 140;
				enumLiteral();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class BlockContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LCURLY() { return GetToken(DbgGrammarParser.LCURLY, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public StatementListContext statementList() {
			return GetRuleContext<StatementListContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RCURLY() { return GetToken(DbgGrammarParser.RCURLY, 0); }
		public BlockContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_block; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IDbgGrammarVisitor<TResult> typedVisitor = visitor as IDbgGrammarVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitBlock(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public BlockContext block() {
		BlockContext _localctx = new BlockContext(Context, State);
		EnterRule(_localctx, 24, RULE_block);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 143;
			Match(LCURLY);
			State = 144;
			statementList();
			State = 145;
			Match(RCURLY);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class VarRefContext : ParserRuleContext {
		public IToken varName;
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] ID() { return GetTokens(DbgGrammarParser.ID); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ID(int i) {
			return GetToken(DbgGrammarParser.ID, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode X() { return GetToken(DbgGrammarParser.X, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] SSUFFIX() { return GetTokens(DbgGrammarParser.SSUFFIX); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SSUFFIX(int i) {
			return GetToken(DbgGrammarParser.SSUFFIX, i);
		}
		public VarRefContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_varRef; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IDbgGrammarVisitor<TResult> typedVisitor = visitor as IDbgGrammarVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitVarRef(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public VarRefContext varRef() {
		VarRefContext _localctx = new VarRefContext(Context, State);
		EnterRule(_localctx, 26, RULE_varRef);
		int _la;
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 147;
			_localctx.varName = TokenStream.LT(1);
			_la = TokenStream.LA(1);
			if ( !(_la==ID || _la==X) ) {
				_localctx.varName = ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			State = 152;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,18,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					{
					{
					State = 148;
					Match(SSUFFIX);
					State = 149;
					Match(ID);
					}
					} 
				}
				State = 154;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,18,Context);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class NumericExpressionContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NUM() { return GetToken(DbgGrammarParser.NUM, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public VarRefContext varRef() {
			return GetRuleContext<VarRefContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LPAREN() { return GetToken(DbgGrammarParser.LPAREN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public NumericExpressionContext[] numericExpression() {
			return GetRuleContexts<NumericExpressionContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public NumericExpressionContext numericExpression(int i) {
			return GetRuleContext<NumericExpressionContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RPAREN() { return GetToken(DbgGrammarParser.RPAREN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode MULT() { return GetToken(DbgGrammarParser.MULT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DIV() { return GetToken(DbgGrammarParser.DIV, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode MOD() { return GetToken(DbgGrammarParser.MOD, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode PLUS() { return GetToken(DbgGrammarParser.PLUS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode MINUS() { return GetToken(DbgGrammarParser.MINUS, 0); }
		public NumericExpressionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_numericExpression; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IDbgGrammarVisitor<TResult> typedVisitor = visitor as IDbgGrammarVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitNumericExpression(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public NumericExpressionContext numericExpression() {
		return numericExpression(0);
	}

	private NumericExpressionContext numericExpression(int _p) {
		ParserRuleContext _parentctx = Context;
		int _parentState = State;
		NumericExpressionContext _localctx = new NumericExpressionContext(Context, _parentState);
		NumericExpressionContext _prevctx = _localctx;
		int _startState = 28;
		EnterRecursionRule(_localctx, 28, RULE_numericExpression, _p);
		int _la;
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 164;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case NUM:
			case ID:
			case X:
				{
				State = 158;
				ErrorHandler.Sync(this);
				switch (TokenStream.LA(1)) {
				case NUM:
					{
					State = 156;
					Match(NUM);
					}
					break;
				case ID:
				case X:
					{
					State = 157;
					varRef();
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				}
				break;
			case LPAREN:
				{
				State = 160;
				Match(LPAREN);
				State = 161;
				numericExpression(0);
				State = 162;
				Match(RPAREN);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			Context.Stop = TokenStream.LT(-1);
			State = 174;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,22,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					if ( ParseListeners!=null )
						TriggerExitRuleEvent();
					_prevctx = _localctx;
					{
					State = 172;
					ErrorHandler.Sync(this);
					switch ( Interpreter.AdaptivePredict(TokenStream,21,Context) ) {
					case 1:
						{
						_localctx = new NumericExpressionContext(_parentctx, _parentState);
						PushNewRecursionContext(_localctx, _startState, RULE_numericExpression);
						State = 166;
						if (!(Precpred(Context, 4))) throw new FailedPredicateException(this, "Precpred(Context, 4)");
						State = 167;
						_la = TokenStream.LA(1);
						if ( !(((_la) & ~0x3f) == 0 && ((1L << _la) & 56L) != 0) ) {
						ErrorHandler.RecoverInline(this);
						}
						else {
							ErrorHandler.ReportMatch(this);
						    Consume();
						}
						State = 168;
						numericExpression(5);
						}
						break;
					case 2:
						{
						_localctx = new NumericExpressionContext(_parentctx, _parentState);
						PushNewRecursionContext(_localctx, _startState, RULE_numericExpression);
						State = 169;
						if (!(Precpred(Context, 3))) throw new FailedPredicateException(this, "Precpred(Context, 3)");
						State = 170;
						_la = TokenStream.LA(1);
						if ( !(_la==PLUS || _la==MINUS) ) {
						ErrorHandler.RecoverInline(this);
						}
						else {
							ErrorHandler.ReportMatch(this);
						    Consume();
						}
						State = 171;
						numericExpression(4);
						}
						break;
					}
					} 
				}
				State = 176;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,22,Context);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			UnrollRecursionContexts(_parentctx);
		}
		return _localctx;
	}

	public partial class BooleanExpressionContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public RelationExpressionContext relationExpression() {
			return GetRuleContext<RelationExpressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public EnumIsExpressionContext enumIsExpression() {
			return GetRuleContext<EnumIsExpressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ListHasExpressionContext listHasExpression() {
			return GetRuleContext<ListHasExpressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public VarRefContext varRef() {
			return GetRuleContext<VarRefContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LPAREN() { return GetToken(DbgGrammarParser.LPAREN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public BooleanExpressionContext[] booleanExpression() {
			return GetRuleContexts<BooleanExpressionContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public BooleanExpressionContext booleanExpression(int i) {
			return GetRuleContext<BooleanExpressionContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RPAREN() { return GetToken(DbgGrammarParser.RPAREN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode AND() { return GetToken(DbgGrammarParser.AND, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OR() { return GetToken(DbgGrammarParser.OR, 0); }
		public BooleanExpressionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_booleanExpression; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IDbgGrammarVisitor<TResult> typedVisitor = visitor as IDbgGrammarVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitBooleanExpression(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public BooleanExpressionContext booleanExpression() {
		return booleanExpression(0);
	}

	private BooleanExpressionContext booleanExpression(int _p) {
		ParserRuleContext _parentctx = Context;
		int _parentState = State;
		BooleanExpressionContext _localctx = new BooleanExpressionContext(Context, _parentState);
		BooleanExpressionContext _prevctx = _localctx;
		int _startState = 30;
		EnterRecursionRule(_localctx, 30, RULE_booleanExpression, _p);
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 188;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,24,Context) ) {
			case 1:
				{
				State = 181;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,23,Context) ) {
				case 1:
					{
					State = 178;
					relationExpression();
					}
					break;
				case 2:
					{
					State = 179;
					enumIsExpression();
					}
					break;
				case 3:
					{
					State = 180;
					listHasExpression();
					}
					break;
				}
				}
				break;
			case 2:
				{
				State = 183;
				varRef();
				}
				break;
			case 3:
				{
				State = 184;
				Match(LPAREN);
				State = 185;
				booleanExpression(0);
				State = 186;
				Match(RPAREN);
				}
				break;
			}
			Context.Stop = TokenStream.LT(-1);
			State = 198;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,26,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					if ( ParseListeners!=null )
						TriggerExitRuleEvent();
					_prevctx = _localctx;
					{
					State = 196;
					ErrorHandler.Sync(this);
					switch ( Interpreter.AdaptivePredict(TokenStream,25,Context) ) {
					case 1:
						{
						_localctx = new BooleanExpressionContext(_parentctx, _parentState);
						PushNewRecursionContext(_localctx, _startState, RULE_booleanExpression);
						State = 190;
						if (!(Precpred(Context, 5))) throw new FailedPredicateException(this, "Precpred(Context, 5)");
						State = 191;
						Match(AND);
						State = 192;
						booleanExpression(6);
						}
						break;
					case 2:
						{
						_localctx = new BooleanExpressionContext(_parentctx, _parentState);
						PushNewRecursionContext(_localctx, _startState, RULE_booleanExpression);
						State = 193;
						if (!(Precpred(Context, 4))) throw new FailedPredicateException(this, "Precpred(Context, 4)");
						State = 194;
						Match(OR);
						State = 195;
						booleanExpression(5);
						}
						break;
					}
					} 
				}
				State = 200;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,26,Context);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			UnrollRecursionContexts(_parentctx);
		}
		return _localctx;
	}

	public partial class RelationExpressionContext : ParserRuleContext {
		public IToken op;
		[System.Diagnostics.DebuggerNonUserCode] public NumericExpressionContext[] numericExpression() {
			return GetRuleContexts<NumericExpressionContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public NumericExpressionContext numericExpression(int i) {
			return GetRuleContext<NumericExpressionContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LT() { return GetToken(DbgGrammarParser.LT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode GT() { return GetToken(DbgGrammarParser.GT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LTE() { return GetToken(DbgGrammarParser.LTE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode GTE() { return GetToken(DbgGrammarParser.GTE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode EQ() { return GetToken(DbgGrammarParser.EQ, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NEQ() { return GetToken(DbgGrammarParser.NEQ, 0); }
		public RelationExpressionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_relationExpression; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IDbgGrammarVisitor<TResult> typedVisitor = visitor as IDbgGrammarVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitRelationExpression(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public RelationExpressionContext relationExpression() {
		RelationExpressionContext _localctx = new RelationExpressionContext(Context, State);
		EnterRule(_localctx, 32, RULE_relationExpression);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 201;
			numericExpression(0);
			State = 202;
			_localctx.op = TokenStream.LT(1);
			_la = TokenStream.LA(1);
			if ( !(((_la) & ~0x3f) == 0 && ((1L << _la) & 4032L) != 0) ) {
				_localctx.op = ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			State = 203;
			numericExpression(0);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class EnumIsExpressionContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public VarRefContext[] varRef() {
			return GetRuleContexts<VarRefContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public VarRefContext varRef(int i) {
			return GetRuleContext<VarRefContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode IS() { return GetToken(DbgGrammarParser.IS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NOT() { return GetToken(DbgGrammarParser.NOT, 0); }
		public EnumIsExpressionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_enumIsExpression; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IDbgGrammarVisitor<TResult> typedVisitor = visitor as IDbgGrammarVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitEnumIsExpression(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public EnumIsExpressionContext enumIsExpression() {
		EnumIsExpressionContext _localctx = new EnumIsExpressionContext(Context, State);
		EnterRule(_localctx, 34, RULE_enumIsExpression);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 205;
			varRef();
			State = 206;
			Match(IS);
			State = 208;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==NOT) {
				{
				State = 207;
				Match(NOT);
				}
			}

			State = 210;
			varRef();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ListHasExpressionContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public VarRefContext[] varRef() {
			return GetRuleContexts<VarRefContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public VarRefContext varRef(int i) {
			return GetRuleContext<VarRefContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode HAS() { return GetToken(DbgGrammarParser.HAS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NO() { return GetToken(DbgGrammarParser.NO, 0); }
		public ListHasExpressionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_listHasExpression; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IDbgGrammarVisitor<TResult> typedVisitor = visitor as IDbgGrammarVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitListHasExpression(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ListHasExpressionContext listHasExpression() {
		ListHasExpressionContext _localctx = new ListHasExpressionContext(Context, State);
		EnterRule(_localctx, 36, RULE_listHasExpression);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 212;
			varRef();
			State = 213;
			Match(HAS);
			State = 215;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==NO) {
				{
				State = 214;
				Match(NO);
				}
			}

			State = 217;
			varRef();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class NumberPredicateContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LT() { return GetToken(DbgGrammarParser.LT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public BooleanExpressionContext booleanExpression() {
			return GetRuleContext<BooleanExpressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode GT() { return GetToken(DbgGrammarParser.GT, 0); }
		public NumberPredicateContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_numberPredicate; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IDbgGrammarVisitor<TResult> typedVisitor = visitor as IDbgGrammarVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitNumberPredicate(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public NumberPredicateContext numberPredicate() {
		NumberPredicateContext _localctx = new NumberPredicateContext(Context, State);
		EnterRule(_localctx, 38, RULE_numberPredicate);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 219;
			Match(LT);
			State = 220;
			booleanExpression(0);
			State = 221;
			Match(GT);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class CardPredicateContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LBRACKET() { return GetToken(DbgGrammarParser.LBRACKET, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public BooleanExpressionContext booleanExpression() {
			return GetRuleContext<BooleanExpressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RBRACKET() { return GetToken(DbgGrammarParser.RBRACKET, 0); }
		public CardPredicateContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_cardPredicate; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IDbgGrammarVisitor<TResult> typedVisitor = visitor as IDbgGrammarVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitCardPredicate(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public CardPredicateContext cardPredicate() {
		CardPredicateContext _localctx = new CardPredicateContext(Context, State);
		EnterRule(_localctx, 40, RULE_cardPredicate);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 223;
			Match(LBRACKET);
			State = 224;
			booleanExpression(0);
			State = 225;
			Match(RBRACKET);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class EnumLiteralContext : ParserRuleContext {
		public IToken variant;
		public IToken enumType;
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COLON() { return GetToken(DbgGrammarParser.COLON, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] CW() { return GetTokens(DbgGrammarParser.CW); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CW(int i) {
			return GetToken(DbgGrammarParser.CW, i);
		}
		public EnumLiteralContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_enumLiteral; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IDbgGrammarVisitor<TResult> typedVisitor = visitor as IDbgGrammarVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitEnumLiteral(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public EnumLiteralContext enumLiteral() {
		EnumLiteralContext _localctx = new EnumLiteralContext(Context, State);
		EnterRule(_localctx, 42, RULE_enumLiteral);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 227;
			_localctx.variant = Match(CW);
			State = 228;
			Match(COLON);
			State = 229;
			_localctx.enumType = Match(CW);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public override bool Sempred(RuleContext _localctx, int ruleIndex, int predIndex) {
		switch (ruleIndex) {
		case 14: return numericExpression_sempred((NumericExpressionContext)_localctx, predIndex);
		case 15: return booleanExpression_sempred((BooleanExpressionContext)_localctx, predIndex);
		}
		return true;
	}
	private bool numericExpression_sempred(NumericExpressionContext _localctx, int predIndex) {
		switch (predIndex) {
		case 0: return Precpred(Context, 4);
		case 1: return Precpred(Context, 3);
		}
		return true;
	}
	private bool booleanExpression_sempred(BooleanExpressionContext _localctx, int predIndex) {
		switch (predIndex) {
		case 2: return Precpred(Context, 5);
		case 3: return Precpred(Context, 4);
		}
		return true;
	}

	private static int[] _serializedATN = {
		4,1,32,232,2,0,7,0,2,1,7,1,2,2,7,2,2,3,7,3,2,4,7,4,2,5,7,5,2,6,7,6,2,7,
		7,7,2,8,7,8,2,9,7,9,2,10,7,10,2,11,7,11,2,12,7,12,2,13,7,13,2,14,7,14,
		2,15,7,15,2,16,7,16,2,17,7,17,2,18,7,18,2,19,7,19,2,20,7,20,2,21,7,21,
		1,0,1,0,1,0,1,1,3,1,49,8,1,1,1,1,1,1,1,5,1,54,8,1,10,1,12,1,57,9,1,3,1,
		59,8,1,1,1,3,1,62,8,1,1,2,3,2,65,8,2,1,2,1,2,3,2,69,8,2,1,2,1,2,1,2,3,
		2,74,8,2,5,2,76,8,2,10,2,12,2,79,9,2,3,2,81,8,2,1,2,3,2,84,8,2,1,3,1,3,
		3,3,88,8,3,1,3,1,3,3,3,92,8,3,1,4,1,4,1,4,1,4,1,4,1,4,1,5,1,5,1,5,1,6,
		1,6,1,6,1,7,1,7,1,7,5,7,109,8,7,10,7,12,7,112,9,7,1,8,1,8,1,8,5,8,117,
		8,8,10,8,12,8,120,9,8,1,9,1,9,1,9,1,9,1,9,1,9,1,10,1,10,1,10,1,10,1,10,
		3,10,133,8,10,1,11,1,11,1,11,1,11,1,11,1,11,1,11,3,11,142,8,11,1,12,1,
		12,1,12,1,12,1,13,1,13,1,13,5,13,151,8,13,10,13,12,13,154,9,13,1,14,1,
		14,1,14,3,14,159,8,14,1,14,1,14,1,14,1,14,3,14,165,8,14,1,14,1,14,1,14,
		1,14,1,14,1,14,5,14,173,8,14,10,14,12,14,176,9,14,1,15,1,15,1,15,1,15,
		3,15,182,8,15,1,15,1,15,1,15,1,15,1,15,3,15,189,8,15,1,15,1,15,1,15,1,
		15,1,15,1,15,5,15,197,8,15,10,15,12,15,200,9,15,1,16,1,16,1,16,1,16,1,
		17,1,17,1,17,3,17,209,8,17,1,17,1,17,1,18,1,18,1,18,3,18,216,8,18,1,18,
		1,18,1,19,1,19,1,19,1,19,1,20,1,20,1,20,1,20,1,21,1,21,1,21,1,21,1,21,
		0,2,28,30,22,0,2,4,6,8,10,12,14,16,18,20,22,24,26,28,30,32,34,36,38,40,
		42,0,4,1,0,29,30,1,0,3,5,1,0,1,2,1,0,6,11,246,0,44,1,0,0,0,2,48,1,0,0,
		0,4,64,1,0,0,0,6,87,1,0,0,0,8,93,1,0,0,0,10,99,1,0,0,0,12,102,1,0,0,0,
		14,105,1,0,0,0,16,113,1,0,0,0,18,121,1,0,0,0,20,127,1,0,0,0,22,141,1,0,
		0,0,24,143,1,0,0,0,26,147,1,0,0,0,28,164,1,0,0,0,30,188,1,0,0,0,32,201,
		1,0,0,0,34,205,1,0,0,0,36,212,1,0,0,0,38,219,1,0,0,0,40,223,1,0,0,0,42,
		227,1,0,0,0,44,45,3,4,2,0,45,46,5,0,0,1,46,1,1,0,0,0,47,49,5,31,0,0,48,
		47,1,0,0,0,48,49,1,0,0,0,49,58,1,0,0,0,50,55,3,6,3,0,51,52,5,31,0,0,52,
		54,3,6,3,0,53,51,1,0,0,0,54,57,1,0,0,0,55,53,1,0,0,0,55,56,1,0,0,0,56,
		59,1,0,0,0,57,55,1,0,0,0,58,50,1,0,0,0,58,59,1,0,0,0,59,61,1,0,0,0,60,
		62,5,31,0,0,61,60,1,0,0,0,61,62,1,0,0,0,62,3,1,0,0,0,63,65,5,31,0,0,64,
		63,1,0,0,0,64,65,1,0,0,0,65,80,1,0,0,0,66,69,3,8,4,0,67,69,3,6,3,0,68,
		66,1,0,0,0,68,67,1,0,0,0,69,77,1,0,0,0,70,73,5,31,0,0,71,74,3,8,4,0,72,
		74,3,6,3,0,73,71,1,0,0,0,73,72,1,0,0,0,74,76,1,0,0,0,75,70,1,0,0,0,76,
		79,1,0,0,0,77,75,1,0,0,0,77,78,1,0,0,0,78,81,1,0,0,0,79,77,1,0,0,0,80,
		68,1,0,0,0,80,81,1,0,0,0,81,83,1,0,0,0,82,84,5,31,0,0,83,82,1,0,0,0,83,
		84,1,0,0,0,84,5,1,0,0,0,85,88,3,10,5,0,86,88,3,12,6,0,87,85,1,0,0,0,87,
		86,1,0,0,0,87,88,1,0,0,0,88,91,1,0,0,0,89,92,3,14,7,0,90,92,3,22,11,0,
		91,89,1,0,0,0,91,90,1,0,0,0,92,7,1,0,0,0,93,94,5,23,0,0,94,95,3,16,8,0,
		95,96,5,24,0,0,96,97,5,19,0,0,97,98,3,24,12,0,98,9,1,0,0,0,99,100,5,29,
		0,0,100,101,5,19,0,0,101,11,1,0,0,0,102,103,3,26,13,0,103,104,5,18,0,0,
		104,13,1,0,0,0,105,110,5,28,0,0,106,109,5,28,0,0,107,109,3,22,11,0,108,
		106,1,0,0,0,108,107,1,0,0,0,109,112,1,0,0,0,110,108,1,0,0,0,110,111,1,
		0,0,0,111,15,1,0,0,0,112,110,1,0,0,0,113,118,5,28,0,0,114,117,5,28,0,0,
		115,117,3,18,9,0,116,114,1,0,0,0,116,115,1,0,0,0,117,120,1,0,0,0,118,116,
		1,0,0,0,118,119,1,0,0,0,119,17,1,0,0,0,120,118,1,0,0,0,121,122,5,23,0,
		0,122,123,5,29,0,0,123,124,5,19,0,0,124,125,3,20,10,0,125,126,5,24,0,0,
		126,19,1,0,0,0,127,132,5,28,0,0,128,129,5,6,0,0,129,130,3,20,10,0,130,
		131,5,7,0,0,131,133,1,0,0,0,132,128,1,0,0,0,132,133,1,0,0,0,133,21,1,0,
		0,0,134,142,3,26,13,0,135,142,3,24,12,0,136,142,3,28,14,0,137,142,3,30,
		15,0,138,142,3,38,19,0,139,142,3,40,20,0,140,142,3,42,21,0,141,134,1,0,
		0,0,141,135,1,0,0,0,141,136,1,0,0,0,141,137,1,0,0,0,141,138,1,0,0,0,141,
		139,1,0,0,0,141,140,1,0,0,0,142,23,1,0,0,0,143,144,5,21,0,0,144,145,3,
		2,1,0,145,146,5,22,0,0,146,25,1,0,0,0,147,152,7,0,0,0,148,149,5,20,0,0,
		149,151,5,29,0,0,150,148,1,0,0,0,151,154,1,0,0,0,152,150,1,0,0,0,152,153,
		1,0,0,0,153,27,1,0,0,0,154,152,1,0,0,0,155,158,6,14,-1,0,156,159,5,27,
		0,0,157,159,3,26,13,0,158,156,1,0,0,0,158,157,1,0,0,0,159,165,1,0,0,0,
		160,161,5,23,0,0,161,162,3,28,14,0,162,163,5,24,0,0,163,165,1,0,0,0,164,
		155,1,0,0,0,164,160,1,0,0,0,165,174,1,0,0,0,166,167,10,4,0,0,167,168,7,
		1,0,0,168,173,3,28,14,5,169,170,10,3,0,0,170,171,7,2,0,0,171,173,3,28,
		14,4,172,166,1,0,0,0,172,169,1,0,0,0,173,176,1,0,0,0,174,172,1,0,0,0,174,
		175,1,0,0,0,175,29,1,0,0,0,176,174,1,0,0,0,177,181,6,15,-1,0,178,182,3,
		32,16,0,179,182,3,34,17,0,180,182,3,36,18,0,181,178,1,0,0,0,181,179,1,
		0,0,0,181,180,1,0,0,0,182,189,1,0,0,0,183,189,3,26,13,0,184,185,5,23,0,
		0,185,186,3,30,15,0,186,187,5,24,0,0,187,189,1,0,0,0,188,177,1,0,0,0,188,
		183,1,0,0,0,188,184,1,0,0,0,189,198,1,0,0,0,190,191,10,5,0,0,191,192,5,
		12,0,0,192,197,3,30,15,6,193,194,10,4,0,0,194,195,5,13,0,0,195,197,3,30,
		15,5,196,190,1,0,0,0,196,193,1,0,0,0,197,200,1,0,0,0,198,196,1,0,0,0,198,
		199,1,0,0,0,199,31,1,0,0,0,200,198,1,0,0,0,201,202,3,28,14,0,202,203,7,
		3,0,0,203,204,3,28,14,0,204,33,1,0,0,0,205,206,3,26,13,0,206,208,5,14,
		0,0,207,209,5,15,0,0,208,207,1,0,0,0,208,209,1,0,0,0,209,210,1,0,0,0,210,
		211,3,26,13,0,211,35,1,0,0,0,212,213,3,26,13,0,213,215,5,16,0,0,214,216,
		5,17,0,0,215,214,1,0,0,0,215,216,1,0,0,0,216,217,1,0,0,0,217,218,3,26,
		13,0,218,37,1,0,0,0,219,220,5,6,0,0,220,221,3,30,15,0,221,222,5,7,0,0,
		222,39,1,0,0,0,223,224,5,25,0,0,224,225,3,30,15,0,225,226,5,26,0,0,226,
		41,1,0,0,0,227,228,5,28,0,0,228,229,5,19,0,0,229,230,5,28,0,0,230,43,1,
		0,0,0,29,48,55,58,61,64,68,73,77,80,83,87,91,108,110,116,118,132,141,152,
		158,164,172,174,181,188,196,198,208,215
	};

	public static readonly ATN _ATN =
		new ATNDeserializer().Deserialize(_serializedATN);


}
} // namespace CodeProcessor.Grammar
