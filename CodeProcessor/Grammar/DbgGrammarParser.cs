//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     ANTLR Version: 4.11.1
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

// Generated from c:\Users\Benedek\Desktop\Dipterv_src\DbgDsl\CodeProcessor\Grammar\DbgGrammar.g4 by ANTLR 4.11.1

// Unreachable code detected
#pragma warning disable 0162
// The variable '...' is assigned but its value is never used
#pragma warning disable 0219
// Missing XML comment for publicly visible type or member '...'
#pragma warning disable 1591
// Ambiguous reference in cref attribute
#pragma warning disable 419

namespace CodeProcessor.Grammar {
#pragma warning disable 3021
using System;
using System.IO;
using System.Text;
using System.Diagnostics;
using System.Collections.Generic;
using Antlr4.Runtime;
using Antlr4.Runtime.Atn;
using Antlr4.Runtime.Misc;
using Antlr4.Runtime.Tree;
using DFA = Antlr4.Runtime.Dfa.DFA;

[System.CodeDom.Compiler.GeneratedCode("ANTLR", "4.11.1")]
[System.CLSCompliant(false)]
public partial class DbgGrammarParser : Parser {
	protected static DFA[] decisionToDFA;
	protected static PredictionContextCache sharedContextCache = new PredictionContextCache();
	public const int
		PLUS=1, MINUS=2, MULT=3, DIV=4, MOD=5, LT=6, GT=7, LTE=8, GTE=9, EQ=10, 
		NEQ=11, AND=12, OR=13, IS=14, NOT=15, HAS=16, NO=17, COLON=18, SSUFFIX=19, 
		LCURLY=20, RCURLY=21, LPAREN=22, RPAREN=23, LBRACKET=24, RBRACKET=25, 
		NUM=26, CW=27, ID=28, NL=29, WS=30;
	public const int
		RULE_program = 0, RULE_statementList = 1, RULE_definitionStatementList = 2, 
		RULE_statement = 3, RULE_commandDefinition = 4, RULE_assignment = 5, RULE_command = 6, 
		RULE_commandDeclaration = 7, RULE_argumentDeclaration = 8, RULE_typeDefinition = 9, 
		RULE_expression = 10, RULE_block = 11, RULE_varRef = 12, RULE_numericExpression = 13, 
		RULE_booleanExpression = 14, RULE_relationExpression = 15, RULE_enumIsExpression = 16, 
		RULE_listHasExpression = 17, RULE_numberPredicate = 18, RULE_cardPredicate = 19;
	public static readonly string[] ruleNames = {
		"program", "statementList", "definitionStatementList", "statement", "commandDefinition", 
		"assignment", "command", "commandDeclaration", "argumentDeclaration", 
		"typeDefinition", "expression", "block", "varRef", "numericExpression", 
		"booleanExpression", "relationExpression", "enumIsExpression", "listHasExpression", 
		"numberPredicate", "cardPredicate"
	};

	private static readonly string[] _LiteralNames = {
		null, "'+'", "'-'", "'*'", "'/'", "'%'", "'<'", "'>'", "'<='", "'>='", 
		"'='", "'!='", "'&'", "'|'", "'IS'", "'NOT'", "'HAS'", "'NO'", "':'", 
		"''s'", "'{'", "'}'", "'('", "')'", "'['", "']'"
	};
	private static readonly string[] _SymbolicNames = {
		null, "PLUS", "MINUS", "MULT", "DIV", "MOD", "LT", "GT", "LTE", "GTE", 
		"EQ", "NEQ", "AND", "OR", "IS", "NOT", "HAS", "NO", "COLON", "SSUFFIX", 
		"LCURLY", "RCURLY", "LPAREN", "RPAREN", "LBRACKET", "RBRACKET", "NUM", 
		"CW", "ID", "NL", "WS"
	};
	public static readonly IVocabulary DefaultVocabulary = new Vocabulary(_LiteralNames, _SymbolicNames);

	[NotNull]
	public override IVocabulary Vocabulary
	{
		get
		{
			return DefaultVocabulary;
		}
	}

	public override string GrammarFileName { get { return "DbgGrammar.g4"; } }

	public override string[] RuleNames { get { return ruleNames; } }

	public override int[] SerializedAtn { get { return _serializedATN; } }

	static DbgGrammarParser() {
		decisionToDFA = new DFA[_ATN.NumberOfDecisions];
		for (int i = 0; i < _ATN.NumberOfDecisions; i++) {
			decisionToDFA[i] = new DFA(_ATN.GetDecisionState(i), i);
		}
	}

		public DbgGrammarParser(ITokenStream input) : this(input, Console.Out, Console.Error) { }

		public DbgGrammarParser(ITokenStream input, TextWriter output, TextWriter errorOutput)
		: base(input, output, errorOutput)
	{
		Interpreter = new ParserATNSimulator(this, _ATN, decisionToDFA, sharedContextCache);
	}

	public partial class ProgramContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public DefinitionStatementListContext definitionStatementList() {
			return GetRuleContext<DefinitionStatementListContext>(0);
		}
		public ProgramContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_program; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IDbgGrammarVisitor<TResult> typedVisitor = visitor as IDbgGrammarVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitProgram(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ProgramContext program() {
		ProgramContext _localctx = new ProgramContext(Context, State);
		EnterRule(_localctx, 0, RULE_program);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 40;
			definitionStatementList();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class StatementListContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] NL() { return GetTokens(DbgGrammarParser.NL); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NL(int i) {
			return GetToken(DbgGrammarParser.NL, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public StatementContext[] statement() {
			return GetRuleContexts<StatementContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public StatementContext statement(int i) {
			return GetRuleContext<StatementContext>(i);
		}
		public StatementListContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_statementList; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IDbgGrammarVisitor<TResult> typedVisitor = visitor as IDbgGrammarVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitStatementList(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public StatementListContext statementList() {
		StatementListContext _localctx = new StatementListContext(Context, State);
		EnterRule(_localctx, 2, RULE_statementList);
		int _la;
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 43;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,0,Context) ) {
			case 1:
				{
				State = 42;
				Match(NL);
				}
				break;
			}
			State = 53;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (((_la) & ~0x3f) == 0 && ((1L << _la) & 491782208L) != 0) {
				{
				State = 45;
				statement();
				State = 50;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,1,Context);
				while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
					if ( _alt==1 ) {
						{
						{
						State = 46;
						Match(NL);
						State = 47;
						statement();
						}
						} 
					}
					State = 52;
					ErrorHandler.Sync(this);
					_alt = Interpreter.AdaptivePredict(TokenStream,1,Context);
				}
				}
			}

			State = 56;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==NL) {
				{
				State = 55;
				Match(NL);
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class DefinitionStatementListContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] NL() { return GetTokens(DbgGrammarParser.NL); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NL(int i) {
			return GetToken(DbgGrammarParser.NL, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public CommandDefinitionContext[] commandDefinition() {
			return GetRuleContexts<CommandDefinitionContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public CommandDefinitionContext commandDefinition(int i) {
			return GetRuleContext<CommandDefinitionContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public StatementContext[] statement() {
			return GetRuleContexts<StatementContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public StatementContext statement(int i) {
			return GetRuleContext<StatementContext>(i);
		}
		public DefinitionStatementListContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_definitionStatementList; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IDbgGrammarVisitor<TResult> typedVisitor = visitor as IDbgGrammarVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitDefinitionStatementList(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public DefinitionStatementListContext definitionStatementList() {
		DefinitionStatementListContext _localctx = new DefinitionStatementListContext(Context, State);
		EnterRule(_localctx, 4, RULE_definitionStatementList);
		int _la;
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 59;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,4,Context) ) {
			case 1:
				{
				State = 58;
				Match(NL);
				}
				break;
			}
			State = 75;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (((_la) & ~0x3f) == 0 && ((1L << _la) & 491782208L) != 0) {
				{
				State = 63;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,5,Context) ) {
				case 1:
					{
					State = 61;
					commandDefinition();
					}
					break;
				case 2:
					{
					State = 62;
					statement();
					}
					break;
				}
				State = 72;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,7,Context);
				while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
					if ( _alt==1 ) {
						{
						{
						State = 65;
						Match(NL);
						State = 68;
						ErrorHandler.Sync(this);
						switch ( Interpreter.AdaptivePredict(TokenStream,6,Context) ) {
						case 1:
							{
							State = 66;
							commandDefinition();
							}
							break;
						case 2:
							{
							State = 67;
							statement();
							}
							break;
						}
						}
						} 
					}
					State = 74;
					ErrorHandler.Sync(this);
					_alt = Interpreter.AdaptivePredict(TokenStream,7,Context);
				}
				}
			}

			State = 78;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==NL) {
				{
				State = 77;
				Match(NL);
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class StatementContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public CommandContext command() {
			return GetRuleContext<CommandContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public AssignmentContext assignment() {
			return GetRuleContext<AssignmentContext>(0);
		}
		public StatementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_statement; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IDbgGrammarVisitor<TResult> typedVisitor = visitor as IDbgGrammarVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitStatement(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public StatementContext statement() {
		StatementContext _localctx = new StatementContext(Context, State);
		EnterRule(_localctx, 6, RULE_statement);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 81;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,10,Context) ) {
			case 1:
				{
				State = 80;
				assignment();
				}
				break;
			}
			State = 85;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case CW:
				{
				State = 83;
				command();
				}
				break;
			case LT:
			case LCURLY:
			case LPAREN:
			case LBRACKET:
			case NUM:
			case ID:
				{
				State = 84;
				expression();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class CommandDefinitionContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LPAREN() { return GetToken(DbgGrammarParser.LPAREN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public CommandDeclarationContext commandDeclaration() {
			return GetRuleContext<CommandDeclarationContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RPAREN() { return GetToken(DbgGrammarParser.RPAREN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COLON() { return GetToken(DbgGrammarParser.COLON, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public BlockContext block() {
			return GetRuleContext<BlockContext>(0);
		}
		public CommandDefinitionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_commandDefinition; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IDbgGrammarVisitor<TResult> typedVisitor = visitor as IDbgGrammarVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitCommandDefinition(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public CommandDefinitionContext commandDefinition() {
		CommandDefinitionContext _localctx = new CommandDefinitionContext(Context, State);
		EnterRule(_localctx, 8, RULE_commandDefinition);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 87;
			Match(LPAREN);
			State = 88;
			commandDeclaration();
			State = 89;
			Match(RPAREN);
			State = 90;
			Match(COLON);
			State = 91;
			block();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class AssignmentContext : ParserRuleContext {
		public IToken varName;
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COLON() { return GetToken(DbgGrammarParser.COLON, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ID() { return GetToken(DbgGrammarParser.ID, 0); }
		public AssignmentContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_assignment; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IDbgGrammarVisitor<TResult> typedVisitor = visitor as IDbgGrammarVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitAssignment(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public AssignmentContext assignment() {
		AssignmentContext _localctx = new AssignmentContext(Context, State);
		EnterRule(_localctx, 10, RULE_assignment);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			{
			State = 93;
			_localctx.varName = Match(ID);
			}
			State = 94;
			Match(COLON);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class CommandContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] CW() { return GetTokens(DbgGrammarParser.CW); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CW(int i) {
			return GetToken(DbgGrammarParser.CW, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext[] expression() {
			return GetRuleContexts<ExpressionContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression(int i) {
			return GetRuleContext<ExpressionContext>(i);
		}
		public CommandContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_command; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IDbgGrammarVisitor<TResult> typedVisitor = visitor as IDbgGrammarVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitCommand(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public CommandContext command() {
		CommandContext _localctx = new CommandContext(Context, State);
		EnterRule(_localctx, 12, RULE_command);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 96;
			Match(CW);
			State = 101;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (((_la) & ~0x3f) == 0 && ((1L << _la) & 491782208L) != 0) {
				{
				State = 99;
				ErrorHandler.Sync(this);
				switch (TokenStream.LA(1)) {
				case CW:
					{
					State = 97;
					Match(CW);
					}
					break;
				case LT:
				case LCURLY:
				case LPAREN:
				case LBRACKET:
				case NUM:
				case ID:
					{
					State = 98;
					expression();
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				}
				State = 103;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class CommandDeclarationContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] CW() { return GetTokens(DbgGrammarParser.CW); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CW(int i) {
			return GetToken(DbgGrammarParser.CW, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ArgumentDeclarationContext[] argumentDeclaration() {
			return GetRuleContexts<ArgumentDeclarationContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ArgumentDeclarationContext argumentDeclaration(int i) {
			return GetRuleContext<ArgumentDeclarationContext>(i);
		}
		public CommandDeclarationContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_commandDeclaration; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IDbgGrammarVisitor<TResult> typedVisitor = visitor as IDbgGrammarVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitCommandDeclaration(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public CommandDeclarationContext commandDeclaration() {
		CommandDeclarationContext _localctx = new CommandDeclarationContext(Context, State);
		EnterRule(_localctx, 14, RULE_commandDeclaration);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 104;
			Match(CW);
			State = 109;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==LPAREN || _la==CW) {
				{
				State = 107;
				ErrorHandler.Sync(this);
				switch (TokenStream.LA(1)) {
				case CW:
					{
					State = 105;
					Match(CW);
					}
					break;
				case LPAREN:
					{
					State = 106;
					argumentDeclaration();
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				}
				State = 111;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ArgumentDeclarationContext : ParserRuleContext {
		public IToken name;
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LPAREN() { return GetToken(DbgGrammarParser.LPAREN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COLON() { return GetToken(DbgGrammarParser.COLON, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public TypeDefinitionContext typeDefinition() {
			return GetRuleContext<TypeDefinitionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RPAREN() { return GetToken(DbgGrammarParser.RPAREN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ID() { return GetToken(DbgGrammarParser.ID, 0); }
		public ArgumentDeclarationContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_argumentDeclaration; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IDbgGrammarVisitor<TResult> typedVisitor = visitor as IDbgGrammarVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitArgumentDeclaration(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ArgumentDeclarationContext argumentDeclaration() {
		ArgumentDeclarationContext _localctx = new ArgumentDeclarationContext(Context, State);
		EnterRule(_localctx, 16, RULE_argumentDeclaration);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 112;
			Match(LPAREN);
			State = 113;
			_localctx.name = Match(ID);
			State = 114;
			Match(COLON);
			State = 115;
			typeDefinition();
			State = 116;
			Match(RPAREN);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class TypeDefinitionContext : ParserRuleContext {
		public IToken @ref;
		public IToken mainType;
		public IToken subType;
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] CW() { return GetTokens(DbgGrammarParser.CW); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CW(int i) {
			return GetToken(DbgGrammarParser.CW, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LT() { return GetToken(DbgGrammarParser.LT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode GT() { return GetToken(DbgGrammarParser.GT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode AND() { return GetToken(DbgGrammarParser.AND, 0); }
		public TypeDefinitionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_typeDefinition; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IDbgGrammarVisitor<TResult> typedVisitor = visitor as IDbgGrammarVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitTypeDefinition(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public TypeDefinitionContext typeDefinition() {
		TypeDefinitionContext _localctx = new TypeDefinitionContext(Context, State);
		EnterRule(_localctx, 18, RULE_typeDefinition);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 119;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==AND) {
				{
				State = 118;
				_localctx.@ref = Match(AND);
				}
			}

			State = 121;
			_localctx.mainType = Match(CW);
			State = 125;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==LT) {
				{
				State = 122;
				Match(LT);
				State = 123;
				_localctx.subType = Match(CW);
				State = 124;
				Match(GT);
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ExpressionContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public VarRefContext varRef() {
			return GetRuleContext<VarRefContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public BlockContext block() {
			return GetRuleContext<BlockContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public NumericExpressionContext numericExpression() {
			return GetRuleContext<NumericExpressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public BooleanExpressionContext booleanExpression() {
			return GetRuleContext<BooleanExpressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public NumberPredicateContext numberPredicate() {
			return GetRuleContext<NumberPredicateContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public CardPredicateContext cardPredicate() {
			return GetRuleContext<CardPredicateContext>(0);
		}
		public ExpressionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_expression; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IDbgGrammarVisitor<TResult> typedVisitor = visitor as IDbgGrammarVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitExpression(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ExpressionContext expression() {
		ExpressionContext _localctx = new ExpressionContext(Context, State);
		EnterRule(_localctx, 20, RULE_expression);
		try {
			State = 133;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,18,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 127;
				varRef();
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 128;
				block();
				}
				break;
			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 129;
				numericExpression(0);
				}
				break;
			case 4:
				EnterOuterAlt(_localctx, 4);
				{
				State = 130;
				booleanExpression(0);
				}
				break;
			case 5:
				EnterOuterAlt(_localctx, 5);
				{
				State = 131;
				numberPredicate();
				}
				break;
			case 6:
				EnterOuterAlt(_localctx, 6);
				{
				State = 132;
				cardPredicate();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class BlockContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LCURLY() { return GetToken(DbgGrammarParser.LCURLY, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public StatementListContext statementList() {
			return GetRuleContext<StatementListContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RCURLY() { return GetToken(DbgGrammarParser.RCURLY, 0); }
		public BlockContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_block; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IDbgGrammarVisitor<TResult> typedVisitor = visitor as IDbgGrammarVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitBlock(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public BlockContext block() {
		BlockContext _localctx = new BlockContext(Context, State);
		EnterRule(_localctx, 22, RULE_block);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 135;
			Match(LCURLY);
			State = 136;
			statementList();
			State = 137;
			Match(RCURLY);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class VarRefContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] ID() { return GetTokens(DbgGrammarParser.ID); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ID(int i) {
			return GetToken(DbgGrammarParser.ID, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] SSUFFIX() { return GetTokens(DbgGrammarParser.SSUFFIX); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SSUFFIX(int i) {
			return GetToken(DbgGrammarParser.SSUFFIX, i);
		}
		public VarRefContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_varRef; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IDbgGrammarVisitor<TResult> typedVisitor = visitor as IDbgGrammarVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitVarRef(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public VarRefContext varRef() {
		VarRefContext _localctx = new VarRefContext(Context, State);
		EnterRule(_localctx, 24, RULE_varRef);
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 139;
			Match(ID);
			State = 144;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,19,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					{
					{
					State = 140;
					Match(SSUFFIX);
					State = 141;
					Match(ID);
					}
					} 
				}
				State = 146;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,19,Context);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class NumericExpressionContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NUM() { return GetToken(DbgGrammarParser.NUM, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public VarRefContext varRef() {
			return GetRuleContext<VarRefContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LPAREN() { return GetToken(DbgGrammarParser.LPAREN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public NumericExpressionContext[] numericExpression() {
			return GetRuleContexts<NumericExpressionContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public NumericExpressionContext numericExpression(int i) {
			return GetRuleContext<NumericExpressionContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RPAREN() { return GetToken(DbgGrammarParser.RPAREN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode MULT() { return GetToken(DbgGrammarParser.MULT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DIV() { return GetToken(DbgGrammarParser.DIV, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode MOD() { return GetToken(DbgGrammarParser.MOD, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode PLUS() { return GetToken(DbgGrammarParser.PLUS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode MINUS() { return GetToken(DbgGrammarParser.MINUS, 0); }
		public NumericExpressionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_numericExpression; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IDbgGrammarVisitor<TResult> typedVisitor = visitor as IDbgGrammarVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitNumericExpression(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public NumericExpressionContext numericExpression() {
		return numericExpression(0);
	}

	private NumericExpressionContext numericExpression(int _p) {
		ParserRuleContext _parentctx = Context;
		int _parentState = State;
		NumericExpressionContext _localctx = new NumericExpressionContext(Context, _parentState);
		NumericExpressionContext _prevctx = _localctx;
		int _startState = 26;
		EnterRecursionRule(_localctx, 26, RULE_numericExpression, _p);
		int _la;
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 156;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case NUM:
			case ID:
				{
				State = 150;
				ErrorHandler.Sync(this);
				switch (TokenStream.LA(1)) {
				case NUM:
					{
					State = 148;
					Match(NUM);
					}
					break;
				case ID:
					{
					State = 149;
					varRef();
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				}
				break;
			case LPAREN:
				{
				State = 152;
				Match(LPAREN);
				State = 153;
				numericExpression(0);
				State = 154;
				Match(RPAREN);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			Context.Stop = TokenStream.LT(-1);
			State = 166;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,23,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					if ( ParseListeners!=null )
						TriggerExitRuleEvent();
					_prevctx = _localctx;
					{
					State = 164;
					ErrorHandler.Sync(this);
					switch ( Interpreter.AdaptivePredict(TokenStream,22,Context) ) {
					case 1:
						{
						_localctx = new NumericExpressionContext(_parentctx, _parentState);
						PushNewRecursionContext(_localctx, _startState, RULE_numericExpression);
						State = 158;
						if (!(Precpred(Context, 4))) throw new FailedPredicateException(this, "Precpred(Context, 4)");
						State = 159;
						_la = TokenStream.LA(1);
						if ( !(((_la) & ~0x3f) == 0 && ((1L << _la) & 56L) != 0) ) {
						ErrorHandler.RecoverInline(this);
						}
						else {
							ErrorHandler.ReportMatch(this);
						    Consume();
						}
						State = 160;
						numericExpression(5);
						}
						break;
					case 2:
						{
						_localctx = new NumericExpressionContext(_parentctx, _parentState);
						PushNewRecursionContext(_localctx, _startState, RULE_numericExpression);
						State = 161;
						if (!(Precpred(Context, 3))) throw new FailedPredicateException(this, "Precpred(Context, 3)");
						State = 162;
						_la = TokenStream.LA(1);
						if ( !(_la==PLUS || _la==MINUS) ) {
						ErrorHandler.RecoverInline(this);
						}
						else {
							ErrorHandler.ReportMatch(this);
						    Consume();
						}
						State = 163;
						numericExpression(4);
						}
						break;
					}
					} 
				}
				State = 168;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,23,Context);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			UnrollRecursionContexts(_parentctx);
		}
		return _localctx;
	}

	public partial class BooleanExpressionContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public RelationExpressionContext relationExpression() {
			return GetRuleContext<RelationExpressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public EnumIsExpressionContext enumIsExpression() {
			return GetRuleContext<EnumIsExpressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ListHasExpressionContext listHasExpression() {
			return GetRuleContext<ListHasExpressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public VarRefContext varRef() {
			return GetRuleContext<VarRefContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LPAREN() { return GetToken(DbgGrammarParser.LPAREN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public BooleanExpressionContext[] booleanExpression() {
			return GetRuleContexts<BooleanExpressionContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public BooleanExpressionContext booleanExpression(int i) {
			return GetRuleContext<BooleanExpressionContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RPAREN() { return GetToken(DbgGrammarParser.RPAREN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode AND() { return GetToken(DbgGrammarParser.AND, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OR() { return GetToken(DbgGrammarParser.OR, 0); }
		public BooleanExpressionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_booleanExpression; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IDbgGrammarVisitor<TResult> typedVisitor = visitor as IDbgGrammarVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitBooleanExpression(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public BooleanExpressionContext booleanExpression() {
		return booleanExpression(0);
	}

	private BooleanExpressionContext booleanExpression(int _p) {
		ParserRuleContext _parentctx = Context;
		int _parentState = State;
		BooleanExpressionContext _localctx = new BooleanExpressionContext(Context, _parentState);
		BooleanExpressionContext _prevctx = _localctx;
		int _startState = 28;
		EnterRecursionRule(_localctx, 28, RULE_booleanExpression, _p);
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 180;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,25,Context) ) {
			case 1:
				{
				State = 173;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,24,Context) ) {
				case 1:
					{
					State = 170;
					relationExpression();
					}
					break;
				case 2:
					{
					State = 171;
					enumIsExpression();
					}
					break;
				case 3:
					{
					State = 172;
					listHasExpression();
					}
					break;
				}
				}
				break;
			case 2:
				{
				State = 175;
				varRef();
				}
				break;
			case 3:
				{
				State = 176;
				Match(LPAREN);
				State = 177;
				booleanExpression(0);
				State = 178;
				Match(RPAREN);
				}
				break;
			}
			Context.Stop = TokenStream.LT(-1);
			State = 190;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,27,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					if ( ParseListeners!=null )
						TriggerExitRuleEvent();
					_prevctx = _localctx;
					{
					State = 188;
					ErrorHandler.Sync(this);
					switch ( Interpreter.AdaptivePredict(TokenStream,26,Context) ) {
					case 1:
						{
						_localctx = new BooleanExpressionContext(_parentctx, _parentState);
						PushNewRecursionContext(_localctx, _startState, RULE_booleanExpression);
						State = 182;
						if (!(Precpred(Context, 5))) throw new FailedPredicateException(this, "Precpred(Context, 5)");
						State = 183;
						Match(AND);
						State = 184;
						booleanExpression(6);
						}
						break;
					case 2:
						{
						_localctx = new BooleanExpressionContext(_parentctx, _parentState);
						PushNewRecursionContext(_localctx, _startState, RULE_booleanExpression);
						State = 185;
						if (!(Precpred(Context, 4))) throw new FailedPredicateException(this, "Precpred(Context, 4)");
						State = 186;
						Match(OR);
						State = 187;
						booleanExpression(5);
						}
						break;
					}
					} 
				}
				State = 192;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,27,Context);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			UnrollRecursionContexts(_parentctx);
		}
		return _localctx;
	}

	public partial class RelationExpressionContext : ParserRuleContext {
		public IToken op;
		[System.Diagnostics.DebuggerNonUserCode] public NumericExpressionContext[] numericExpression() {
			return GetRuleContexts<NumericExpressionContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public NumericExpressionContext numericExpression(int i) {
			return GetRuleContext<NumericExpressionContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LT() { return GetToken(DbgGrammarParser.LT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode GT() { return GetToken(DbgGrammarParser.GT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LTE() { return GetToken(DbgGrammarParser.LTE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode GTE() { return GetToken(DbgGrammarParser.GTE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode EQ() { return GetToken(DbgGrammarParser.EQ, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NEQ() { return GetToken(DbgGrammarParser.NEQ, 0); }
		public RelationExpressionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_relationExpression; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IDbgGrammarVisitor<TResult> typedVisitor = visitor as IDbgGrammarVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitRelationExpression(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public RelationExpressionContext relationExpression() {
		RelationExpressionContext _localctx = new RelationExpressionContext(Context, State);
		EnterRule(_localctx, 30, RULE_relationExpression);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 193;
			numericExpression(0);
			State = 194;
			_localctx.op = TokenStream.LT(1);
			_la = TokenStream.LA(1);
			if ( !(((_la) & ~0x3f) == 0 && ((1L << _la) & 4032L) != 0) ) {
				_localctx.op = ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			State = 195;
			numericExpression(0);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class EnumIsExpressionContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public VarRefContext[] varRef() {
			return GetRuleContexts<VarRefContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public VarRefContext varRef(int i) {
			return GetRuleContext<VarRefContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode IS() { return GetToken(DbgGrammarParser.IS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NOT() { return GetToken(DbgGrammarParser.NOT, 0); }
		public EnumIsExpressionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_enumIsExpression; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IDbgGrammarVisitor<TResult> typedVisitor = visitor as IDbgGrammarVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitEnumIsExpression(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public EnumIsExpressionContext enumIsExpression() {
		EnumIsExpressionContext _localctx = new EnumIsExpressionContext(Context, State);
		EnterRule(_localctx, 32, RULE_enumIsExpression);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 197;
			varRef();
			State = 198;
			Match(IS);
			State = 200;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==NOT) {
				{
				State = 199;
				Match(NOT);
				}
			}

			State = 202;
			varRef();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ListHasExpressionContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public VarRefContext[] varRef() {
			return GetRuleContexts<VarRefContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public VarRefContext varRef(int i) {
			return GetRuleContext<VarRefContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode HAS() { return GetToken(DbgGrammarParser.HAS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NO() { return GetToken(DbgGrammarParser.NO, 0); }
		public ListHasExpressionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_listHasExpression; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IDbgGrammarVisitor<TResult> typedVisitor = visitor as IDbgGrammarVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitListHasExpression(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ListHasExpressionContext listHasExpression() {
		ListHasExpressionContext _localctx = new ListHasExpressionContext(Context, State);
		EnterRule(_localctx, 34, RULE_listHasExpression);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 204;
			varRef();
			State = 205;
			Match(HAS);
			State = 207;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==NO) {
				{
				State = 206;
				Match(NO);
				}
			}

			State = 209;
			varRef();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class NumberPredicateContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LT() { return GetToken(DbgGrammarParser.LT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public BooleanExpressionContext booleanExpression() {
			return GetRuleContext<BooleanExpressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode GT() { return GetToken(DbgGrammarParser.GT, 0); }
		public NumberPredicateContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_numberPredicate; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IDbgGrammarVisitor<TResult> typedVisitor = visitor as IDbgGrammarVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitNumberPredicate(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public NumberPredicateContext numberPredicate() {
		NumberPredicateContext _localctx = new NumberPredicateContext(Context, State);
		EnterRule(_localctx, 36, RULE_numberPredicate);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 211;
			Match(LT);
			State = 212;
			booleanExpression(0);
			State = 213;
			Match(GT);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class CardPredicateContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LBRACKET() { return GetToken(DbgGrammarParser.LBRACKET, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public BooleanExpressionContext booleanExpression() {
			return GetRuleContext<BooleanExpressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RBRACKET() { return GetToken(DbgGrammarParser.RBRACKET, 0); }
		public CardPredicateContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_cardPredicate; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IDbgGrammarVisitor<TResult> typedVisitor = visitor as IDbgGrammarVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitCardPredicate(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public CardPredicateContext cardPredicate() {
		CardPredicateContext _localctx = new CardPredicateContext(Context, State);
		EnterRule(_localctx, 38, RULE_cardPredicate);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 215;
			Match(LBRACKET);
			State = 216;
			booleanExpression(0);
			State = 217;
			Match(RBRACKET);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public override bool Sempred(RuleContext _localctx, int ruleIndex, int predIndex) {
		switch (ruleIndex) {
		case 13: return numericExpression_sempred((NumericExpressionContext)_localctx, predIndex);
		case 14: return booleanExpression_sempred((BooleanExpressionContext)_localctx, predIndex);
		}
		return true;
	}
	private bool numericExpression_sempred(NumericExpressionContext _localctx, int predIndex) {
		switch (predIndex) {
		case 0: return Precpred(Context, 4);
		case 1: return Precpred(Context, 3);
		}
		return true;
	}
	private bool booleanExpression_sempred(BooleanExpressionContext _localctx, int predIndex) {
		switch (predIndex) {
		case 2: return Precpred(Context, 5);
		case 3: return Precpred(Context, 4);
		}
		return true;
	}

	private static int[] _serializedATN = {
		4,1,30,220,2,0,7,0,2,1,7,1,2,2,7,2,2,3,7,3,2,4,7,4,2,5,7,5,2,6,7,6,2,7,
		7,7,2,8,7,8,2,9,7,9,2,10,7,10,2,11,7,11,2,12,7,12,2,13,7,13,2,14,7,14,
		2,15,7,15,2,16,7,16,2,17,7,17,2,18,7,18,2,19,7,19,1,0,1,0,1,1,3,1,44,8,
		1,1,1,1,1,1,1,5,1,49,8,1,10,1,12,1,52,9,1,3,1,54,8,1,1,1,3,1,57,8,1,1,
		2,3,2,60,8,2,1,2,1,2,3,2,64,8,2,1,2,1,2,1,2,3,2,69,8,2,5,2,71,8,2,10,2,
		12,2,74,9,2,3,2,76,8,2,1,2,3,2,79,8,2,1,3,3,3,82,8,3,1,3,1,3,3,3,86,8,
		3,1,4,1,4,1,4,1,4,1,4,1,4,1,5,1,5,1,5,1,6,1,6,1,6,5,6,100,8,6,10,6,12,
		6,103,9,6,1,7,1,7,1,7,5,7,108,8,7,10,7,12,7,111,9,7,1,8,1,8,1,8,1,8,1,
		8,1,8,1,9,3,9,120,8,9,1,9,1,9,1,9,1,9,3,9,126,8,9,1,10,1,10,1,10,1,10,
		1,10,1,10,3,10,134,8,10,1,11,1,11,1,11,1,11,1,12,1,12,1,12,5,12,143,8,
		12,10,12,12,12,146,9,12,1,13,1,13,1,13,3,13,151,8,13,1,13,1,13,1,13,1,
		13,3,13,157,8,13,1,13,1,13,1,13,1,13,1,13,1,13,5,13,165,8,13,10,13,12,
		13,168,9,13,1,14,1,14,1,14,1,14,3,14,174,8,14,1,14,1,14,1,14,1,14,1,14,
		3,14,181,8,14,1,14,1,14,1,14,1,14,1,14,1,14,5,14,189,8,14,10,14,12,14,
		192,9,14,1,15,1,15,1,15,1,15,1,16,1,16,1,16,3,16,201,8,16,1,16,1,16,1,
		17,1,17,1,17,3,17,208,8,17,1,17,1,17,1,18,1,18,1,18,1,18,1,19,1,19,1,19,
		1,19,1,19,0,2,26,28,20,0,2,4,6,8,10,12,14,16,18,20,22,24,26,28,30,32,34,
		36,38,0,3,1,0,3,5,1,0,1,2,1,0,6,11,235,0,40,1,0,0,0,2,43,1,0,0,0,4,59,
		1,0,0,0,6,81,1,0,0,0,8,87,1,0,0,0,10,93,1,0,0,0,12,96,1,0,0,0,14,104,1,
		0,0,0,16,112,1,0,0,0,18,119,1,0,0,0,20,133,1,0,0,0,22,135,1,0,0,0,24,139,
		1,0,0,0,26,156,1,0,0,0,28,180,1,0,0,0,30,193,1,0,0,0,32,197,1,0,0,0,34,
		204,1,0,0,0,36,211,1,0,0,0,38,215,1,0,0,0,40,41,3,4,2,0,41,1,1,0,0,0,42,
		44,5,29,0,0,43,42,1,0,0,0,43,44,1,0,0,0,44,53,1,0,0,0,45,50,3,6,3,0,46,
		47,5,29,0,0,47,49,3,6,3,0,48,46,1,0,0,0,49,52,1,0,0,0,50,48,1,0,0,0,50,
		51,1,0,0,0,51,54,1,0,0,0,52,50,1,0,0,0,53,45,1,0,0,0,53,54,1,0,0,0,54,
		56,1,0,0,0,55,57,5,29,0,0,56,55,1,0,0,0,56,57,1,0,0,0,57,3,1,0,0,0,58,
		60,5,29,0,0,59,58,1,0,0,0,59,60,1,0,0,0,60,75,1,0,0,0,61,64,3,8,4,0,62,
		64,3,6,3,0,63,61,1,0,0,0,63,62,1,0,0,0,64,72,1,0,0,0,65,68,5,29,0,0,66,
		69,3,8,4,0,67,69,3,6,3,0,68,66,1,0,0,0,68,67,1,0,0,0,69,71,1,0,0,0,70,
		65,1,0,0,0,71,74,1,0,0,0,72,70,1,0,0,0,72,73,1,0,0,0,73,76,1,0,0,0,74,
		72,1,0,0,0,75,63,1,0,0,0,75,76,1,0,0,0,76,78,1,0,0,0,77,79,5,29,0,0,78,
		77,1,0,0,0,78,79,1,0,0,0,79,5,1,0,0,0,80,82,3,10,5,0,81,80,1,0,0,0,81,
		82,1,0,0,0,82,85,1,0,0,0,83,86,3,12,6,0,84,86,3,20,10,0,85,83,1,0,0,0,
		85,84,1,0,0,0,86,7,1,0,0,0,87,88,5,22,0,0,88,89,3,14,7,0,89,90,5,23,0,
		0,90,91,5,18,0,0,91,92,3,22,11,0,92,9,1,0,0,0,93,94,5,28,0,0,94,95,5,18,
		0,0,95,11,1,0,0,0,96,101,5,27,0,0,97,100,5,27,0,0,98,100,3,20,10,0,99,
		97,1,0,0,0,99,98,1,0,0,0,100,103,1,0,0,0,101,99,1,0,0,0,101,102,1,0,0,
		0,102,13,1,0,0,0,103,101,1,0,0,0,104,109,5,27,0,0,105,108,5,27,0,0,106,
		108,3,16,8,0,107,105,1,0,0,0,107,106,1,0,0,0,108,111,1,0,0,0,109,107,1,
		0,0,0,109,110,1,0,0,0,110,15,1,0,0,0,111,109,1,0,0,0,112,113,5,22,0,0,
		113,114,5,28,0,0,114,115,5,18,0,0,115,116,3,18,9,0,116,117,5,23,0,0,117,
		17,1,0,0,0,118,120,5,12,0,0,119,118,1,0,0,0,119,120,1,0,0,0,120,121,1,
		0,0,0,121,125,5,27,0,0,122,123,5,6,0,0,123,124,5,27,0,0,124,126,5,7,0,
		0,125,122,1,0,0,0,125,126,1,0,0,0,126,19,1,0,0,0,127,134,3,24,12,0,128,
		134,3,22,11,0,129,134,3,26,13,0,130,134,3,28,14,0,131,134,3,36,18,0,132,
		134,3,38,19,0,133,127,1,0,0,0,133,128,1,0,0,0,133,129,1,0,0,0,133,130,
		1,0,0,0,133,131,1,0,0,0,133,132,1,0,0,0,134,21,1,0,0,0,135,136,5,20,0,
		0,136,137,3,2,1,0,137,138,5,21,0,0,138,23,1,0,0,0,139,144,5,28,0,0,140,
		141,5,19,0,0,141,143,5,28,0,0,142,140,1,0,0,0,143,146,1,0,0,0,144,142,
		1,0,0,0,144,145,1,0,0,0,145,25,1,0,0,0,146,144,1,0,0,0,147,150,6,13,-1,
		0,148,151,5,26,0,0,149,151,3,24,12,0,150,148,1,0,0,0,150,149,1,0,0,0,151,
		157,1,0,0,0,152,153,5,22,0,0,153,154,3,26,13,0,154,155,5,23,0,0,155,157,
		1,0,0,0,156,147,1,0,0,0,156,152,1,0,0,0,157,166,1,0,0,0,158,159,10,4,0,
		0,159,160,7,0,0,0,160,165,3,26,13,5,161,162,10,3,0,0,162,163,7,1,0,0,163,
		165,3,26,13,4,164,158,1,0,0,0,164,161,1,0,0,0,165,168,1,0,0,0,166,164,
		1,0,0,0,166,167,1,0,0,0,167,27,1,0,0,0,168,166,1,0,0,0,169,173,6,14,-1,
		0,170,174,3,30,15,0,171,174,3,32,16,0,172,174,3,34,17,0,173,170,1,0,0,
		0,173,171,1,0,0,0,173,172,1,0,0,0,174,181,1,0,0,0,175,181,3,24,12,0,176,
		177,5,22,0,0,177,178,3,28,14,0,178,179,5,23,0,0,179,181,1,0,0,0,180,169,
		1,0,0,0,180,175,1,0,0,0,180,176,1,0,0,0,181,190,1,0,0,0,182,183,10,5,0,
		0,183,184,5,12,0,0,184,189,3,28,14,6,185,186,10,4,0,0,186,187,5,13,0,0,
		187,189,3,28,14,5,188,182,1,0,0,0,188,185,1,0,0,0,189,192,1,0,0,0,190,
		188,1,0,0,0,190,191,1,0,0,0,191,29,1,0,0,0,192,190,1,0,0,0,193,194,3,26,
		13,0,194,195,7,2,0,0,195,196,3,26,13,0,196,31,1,0,0,0,197,198,3,24,12,
		0,198,200,5,14,0,0,199,201,5,15,0,0,200,199,1,0,0,0,200,201,1,0,0,0,201,
		202,1,0,0,0,202,203,3,24,12,0,203,33,1,0,0,0,204,205,3,24,12,0,205,207,
		5,16,0,0,206,208,5,17,0,0,207,206,1,0,0,0,207,208,1,0,0,0,208,209,1,0,
		0,0,209,210,3,24,12,0,210,35,1,0,0,0,211,212,5,6,0,0,212,213,3,28,14,0,
		213,214,5,7,0,0,214,37,1,0,0,0,215,216,5,24,0,0,216,217,3,28,14,0,217,
		218,5,25,0,0,218,39,1,0,0,0,30,43,50,53,56,59,63,68,72,75,78,81,85,99,
		101,107,109,119,125,133,144,150,156,164,166,173,180,188,190,200,207
	};

	public static readonly ATN _ATN =
		new ATNDeserializer().Deserialize(_serializedATN);


}
} // namespace CodeProcessor.Grammar
